<!-- puzzle.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Interactive Jigsaw Puzzle</title>
  <style>
    body {
      background: #111; color: #fff; font-family: sans-serif;
      display: flex; flex-direction: column; align-items: center;
    }
    h1 { margin-top: 20px; }
    #board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 2px;
      margin-top: 30px;
    }
    .piece {
      width: 100px; height: 100px;
      background-image: url('prabhas.jpg');
      background-size: 300px 300px;
      border: 1px solid #333;
      cursor: grab;
    }
  </style>
</head>
<body>
  <h1>ThisIsCinema - Prabhas Puzzle</h1>
  <div id="board"></div>

  <script>
    const board = document.getElementById('board');
    const pieces = [];

    // Create puzzle pieces
    for (let i = 0; i < 9; i++) {
      const piece = document.createElement('div');
      piece.className = 'piece';
      const x = i % 3, y = Math.floor(i / 3);
      piece.style.backgroundPosition = `-${x * 100}px -${y * 100}px`;
      piece.setAttribute('data-index', i);
      piece.setAttribute('draggable', true);
      pieces.push(piece);
    }

    // Shuffle and append to board
    function shuffleAndRender() {
      const shuffled = [...pieces].sort(() => Math.random() - 0.5);
      board.innerHTML = '';
      shuffled.forEach(p => board.appendChild(p));
    }

    shuffleAndRender();

    // Drag & Drop Logic
    let dragged = null;

    board.addEventListener('dragstart', e => {
      if (e.target.classList.contains('piece')) {
        dragged = e.target;
      }
    });

    board.addEventListener('dragover', e => e.preventDefault());

    board.addEventListener('drop', e => {
      if (e.target.classList.contains('piece') && e.target !== dragged) {
        const draggedIndex = [...board.children].indexOf(dragged);
        const droppedIndex = [...board.children].indexOf(e.target);

        // Swap pieces
        board.insertBefore(dragged, board.children[droppedIndex]);
        board.insertBefore(e.target, board.children[draggedIndex]);

        checkWin();
      }
    });

    function checkWin() {
      const currentOrder = [...board.children].map(p => p.getAttribute('data-index'));
      const isCorrect = currentOrder.every((val, i) => val == i);
      if (isCorrect) {
        setTimeout(() => alert('ðŸŽ‰ Puzzle Solved!'), 300);
      }
    }
  </script>
</body>
</html>
